; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?pi@@3NA					; pi
PUBLIC	?h@@3NA						; h
PUBLIC	?c@@3NA						; c
PUBLIC	?k_B@@3NA					; k_B
EXTRN	__imp___std_terminate:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp___CxxFrameHandler4:PROC
?pi@@3NA DQ	0400921fb54442d18r		; 3.14159 ; pi
?h@@3NA	DQ	0390b860bde023111r		; 6.62607e-34 ; h
?c@@3NA	DQ	0421beb9bf3a00000r		; 2.99792e+10 ; c
?k_B@@3NA DQ	03b30b0e6d55e647cr		; 1.38065e-23 ; k_B
PUBLIC	?simd_mult2_fp64@@YAXHHNNNPEAN000@Z		; simd_mult2_fp64
PUBLIC	?simd_mult1_fp64@@YAXHHNPEAN00@Z		; simd_mult1_fp64
PUBLIC	?cpp_mult1_fp64@@YAXHHNPEAN00@Z			; cpp_mult1_fp64
PUBLIC	?simd_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z ; simd_calc_matrix_fp64
PUBLIC	?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z ; cpp_calc_matrix_fp64
PUBLIC	?add_flt@@YAMMM@Z				; add_flt
PUBLIC	?abs@@YANN@Z					; abs
PUBLIC	__real@085c305f
PUBLIC	__real@19858737
PUBLIC	__real@3b3803c08d4d3d33
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40490fdb
PUBLIC	__real@408f400000000000
PUBLIC	__real@4245edb818bd7152
PUBLIC	__real@44aeacd8288cb77f
PUBLIC	__real@50df5ce0
PUBLIC	__real@bb3803c08d4d3d33
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bff7053ae731ed22
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__ymm@00000000000000003ff921fb54442d1800000000000000003ff921fb54442d18
PUBLIC	__ymm@3fe00000000000003fe00000000000003fe00000000000003fe0000000000000
PUBLIC	__ymm@4245edb818bd71524245edb818bd71524245edb818bd71524245edb818bd7152
EXTRN	__GSHandlerCheck:PROC
EXTRN	__libm_sse2_sincos_:PROC
EXTRN	__vdecl_exp4:PROC
EXTRN	__vdecl_sin4:PROC
EXTRN	__vdecl_sincos4:PROC
EXTRN	_vcomp_for_dynamic_init:PROC
EXTRN	_vcomp_for_dynamic_next:PROC
EXTRN	_vcomp_fork:PROC
EXTRN	exp:PROC
EXTRN	log:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	pow:PROC
EXTRN	sin:PROC
EXTRN	tan:PROC
EXTRN	_You_must_link_with_Microsoft_OpenMP_library:DWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?simd_mult2_fp64@@YAXHHNNNPEAN000@Z DD imagerel $LN18
	DD	imagerel $LN18+454
	DD	imagerel $unwind$?simd_mult2_fp64@@YAXHHNNNPEAN000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?simd_mult1_fp64@@YAXHHNPEAN00@Z DD imagerel $LN19
	DD	imagerel $LN19+30
	DD	imagerel $unwind$?simd_mult1_fp64@@YAXHHNPEAN00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?simd_mult1_fp64@@YAXHHNPEAN00@Z DD imagerel $LN19+30
	DD	imagerel $LN19+305
	DD	imagerel $chain$5$?simd_mult1_fp64@@YAXHHNPEAN00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?simd_mult1_fp64@@YAXHHNPEAN00@Z DD imagerel $LN19+305
	DD	imagerel $LN19+316
	DD	imagerel $chain$6$?simd_mult1_fp64@@YAXHHNPEAN00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cpp_mult1_fp64@@YAXHHNPEAN00@Z DD imagerel $LN19
	DD	imagerel $LN19+30
	DD	imagerel $unwind$?cpp_mult1_fp64@@YAXHHNPEAN00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?cpp_mult1_fp64@@YAXHHNPEAN00@Z DD imagerel $LN19+30
	DD	imagerel $LN19+497
	DD	imagerel $chain$11$?cpp_mult1_fp64@@YAXHHNPEAN00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$?cpp_mult1_fp64@@YAXHHNPEAN00@Z DD imagerel $LN19+497
	DD	imagerel $LN19+498
	DD	imagerel $chain$12$?cpp_mult1_fp64@@YAXHHNPEAN00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?simd_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD imagerel $LN2
	DD	imagerel $LN2+588
	DD	imagerel $unwind$?simd_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD imagerel $LN14
	DD	imagerel $LN14+155
	DD	imagerel $unwind$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD imagerel $LN14+155
	DD	imagerel $LN14+840
	DD	imagerel $chain$8$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD imagerel $LN14+840
	DD	imagerel $LN14+897
	DD	imagerel $chain$9$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD imagerel ?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z
	DD	imagerel ?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z+1045
	DD	imagerel $unwind$?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z
;	COMDAT __ymm@4245edb818bd71524245edb818bd71524245edb818bd71524245edb818bd7152
CONST	SEGMENT
__ymm@4245edb818bd71524245edb818bd71524245edb818bd71524245edb818bd7152 DB 'R'
	DB	'q', 0bdH, 018H, 0b8H, 0edH, 'EBRq', 0bdH, 018H, 0b8H, 0edH, 'E'
	DB	'BRq', 0bdH, 018H, 0b8H, 0edH, 'EBRq', 0bdH, 018H, 0b8H, 0edH, 'E'
	DB	'B'
CONST	ENDS
;	COMDAT __ymm@3fe00000000000003fe00000000000003fe00000000000003fe0000000000000
CONST	SEGMENT
__ymm@3fe00000000000003fe00000000000003fe00000000000003fe0000000000000 DB 00H
	DB	00H, 00H, 00H, 00H, 00H, 0e0H, '?', 00H, 00H, 00H, 00H, 00H, 00H
	DB	0e0H, '?', 00H, 00H, 00H, 00H, 00H, 00H, 0e0H, '?', 00H, 00H, 00H
	DB	00H, 00H, 00H, 0e0H, '?'
CONST	ENDS
;	COMDAT __ymm@00000000000000003ff921fb54442d1800000000000000003ff921fb54442d18
CONST	SEGMENT
__ymm@00000000000000003ff921fb54442d1800000000000000003ff921fb54442d18 DB 018H
	DB	'-DT', 0fbH, '!', 0f9H, '?', 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 018H, '-DT', 0fbH, '!', 0f9H, '?', 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@bff7053ae731ed22
CONST	SEGMENT
__real@bff7053ae731ed22 DQ 0bff7053ae731ed22r	; -1.43878
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bb3803c08d4d3d33
CONST	SEGMENT
__real@bb3803c08d4d3d33 DQ 0bb3803c08d4d3d33r	; -1.98645e-23
CONST	ENDS
;	COMDAT __real@50df5ce0
CONST	SEGMENT
__real@50df5ce0 DD 050df5ce0r			; 2.99792e+10
CONST	ENDS
;	COMDAT __real@44aeacd8288cb77f
CONST	SEGMENT
__real@44aeacd8288cb77f DQ 044aeacd8288cb77fr	; 7.24297e+22
CONST	ENDS
;	COMDAT __real@4245edb818bd7152
CONST	SEGMENT
__real@4245edb818bd7152 DQ 04245edb818bd7152r	; 1.88365e+11
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3b3803c08d4d3d33
CONST	SEGMENT
__real@3b3803c08d4d3d33 DQ 03b3803c08d4d3d33r	; 1.98645e-23
CONST	ENDS
;	COMDAT __real@19858737
CONST	SEGMENT
__real@19858737 DD 019858737r			; 1.38065e-23
CONST	ENDS
;	COMDAT __real@085c305f
CONST	SEGMENT
__real@085c305f DD 0085c305fr			; 6.62607e-34
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD 0165601H
	DD	0bb84dH
	DD	0ca845H
	DD	0d983dH
	DD	0e8835H
	DD	0f7830H
	DD	010682bH
	DD	0230126H
	DD	0e01df01fH
	DD	0c019d01bH
	DD	060167017H
	DD	050143015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+155
	DD	imagerel $unwind$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD 0128221H
	DD	03f882H
	DD	06c874H
	DD	099866H
	DD	01af455H
	DD	01be449H
	DD	01cc433H
	DD	0236423H
	DD	0215413H
	DD	0203408H
	DD	imagerel $LN14
	DD	imagerel $LN14+155
	DD	imagerel $unwind$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD 0125c01H
	DD	04e85cH
	DD	05d849H
	DD	07b83bH
	DD	08a835H
	DD	0a8830H
	DD	0b7822H
	DD	0c681dH
	DD	01d010dH
	DD	07004d006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?simd_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z DD 0b2901H
	DD	024881eH
	DD	0257819H
	DD	0266814H
	DD	050340fH
	DD	04e010fH
	DD	05008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$?cpp_mult1_fp64@@YAXHHNPEAN00@Z DD 021H
	DD	imagerel $LN19
	DD	imagerel $LN19+30
	DD	imagerel $unwind$?cpp_mult1_fp64@@YAXHHNPEAN00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?cpp_mult1_fp64@@YAXHHNPEAN00@Z DD 0186521H
	DD	02b865H
	DD	049852H
	DD	05884dH
	DD	067848H
	DD	076843H
	DD	010f43aH
	DD	011e42eH
	DD	012d426H
	DD	013c41eH
	DD	0197418H
	DD	0186410H
	DD	0175404H
	DD	imagerel $LN19
	DD	imagerel $LN19+30
	DD	imagerel $unwind$?cpp_mult1_fp64@@YAXHHNPEAN00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cpp_mult1_fp64@@YAXHHNPEAN00@Z DD 051b01H
	DD	03a81bH
	DD	0140116H
	DD	0300fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?simd_mult1_fp64@@YAXHHNPEAN00@Z DD 021H
	DD	imagerel $LN19
	DD	imagerel $LN19+30
	DD	imagerel $unwind$?simd_mult1_fp64@@YAXHHNPEAN00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?simd_mult1_fp64@@YAXHHNPEAN00@Z DD 0c4521H
	DD	026845H
	DD	06f42eH
	DD	0de425H
	DD	0cc420H
	DD	0b7416H
	DD	0a3405H
	DD	imagerel $LN19
	DD	imagerel $LN19+30
	DD	imagerel $unwind$?simd_mult1_fp64@@YAXHHNPEAN00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?simd_mult1_fp64@@YAXHHNPEAN00@Z DD 030801H
	DD	0d0046208H
	DD	06002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?simd_mult2_fp64@@YAXHHNNNPEAN000@Z DD 0133a01H
	DD	0c8831H
	DD	0d782cH
	DD	0e6827H
	DD	0277422H
	DD	0266422H
	DD	0253422H
	DD	01e0122H
	DD	0e019f01bH
	DD	0c015d017H
	DD	05013H
xdata	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp
;	COMDAT ?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 4
$S29$1$ = 8
i$1$ = 12
Wi_vec$1$ = 32
temp_pd_0$1$ = 32
aw1i_vec$1$ = 64
tv964 = 64
i$ = 352
S_kl_addr_vec$ = 360
N_G_vec$ = 368
h_vec$ = 376
h_dwt_vec$ = 384
dwt_vec$ = 392
r_tan_vec$ = 400
r_sin_vec$ = 408
w_min_vec$ = 416
dw_recp$ = 424
two_pi_c$ = 432
factor_vec$ = 440
nu$ = 448
sigma_gRmin$ = 456
E0$ = 464
J_clip$ = 472
l0_arr$ = 480
aG1_arr$ = 488
chunksize$ = 496
Nlines$ = 504
?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z PROC ; simd_calc_matrix_fp64$omp$1, COMDAT

; 217  :     schedule(dynamic, chunksize)

	mov	rax, rsp
	mov	QWORD PTR [rax+32], r9
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 280				; 00000118H
	vmovaps	XMMWORD PTR [rax-88], xmm6
	vmovaps	XMMWORD PTR [rax-104], xmm7
	vmovaps	XMMWORD PTR [rax-120], xmm8
	vmovaps	XMMWORD PTR [rax-136], xmm9
	vmovaps	XMMWORD PTR [rax-152], xmm10
	vmovaps	XMMWORD PTR [rax-168], xmm11
	lea	rbp, QWORD PTR [rsp+80]
	and	rbp, -32				; ffffffffffffffe0H

; 218  :     for (i=0; i < Nlines; i+=4){

	mov	rax, QWORD PTR chunksize$[rsp]
	mov	r10d, DWORD PTR [rax]
	mov	rax, QWORD PTR Nlines$[rsp]
	mov	r15d, DWORD PTR [rax]
	test	r15d, r15d
	jle	$LN4@simd_calc_
	xor	edx, edx
	mov	DWORD PTR [rsp+32], r10d
	dec	r15d
	mov	r9d, 4
	mov	r8d, r15d
	mov	DWORD PTR $S29$1$[rbp], r15d
	lea	ecx, QWORD PTR [rdx+98]
	call	_vcomp_for_dynamic_init
	lea	rdx, QWORD PTR $T1[rbp]
	lea	rcx, QWORD PTR $T2[rbp]
	call	_vcomp_for_dynamic_next
	test	eax, eax
	je	$LN4@simd_calc_
	mov	r14, QWORD PTR nu$[rsp]
	mov	r12, QWORD PTR E0$[rsp]
	mov	r13, QWORD PTR sigma_gRmin$[rsp]
	sub	r12, r14
	mov	r15, QWORD PTR J_clip$[rsp]
	sub	r13, r14
	npad	1
$LL5@simd_calc_:
	movsxd	rcx, DWORD PTR $T2[rbp]
	mov	eax, DWORD PTR $T1[rbp]
	sub	eax, ecx
	shr	eax, 2
	inc	eax
	lea	rdi, QWORD PTR [r15+rcx*4]
	mov	r15, QWORD PTR h_vec$[rsp]
	lea	rbx, QWORD PTR [r14+rcx*8]
	mov	r14, QWORD PTR N_G_vec$[rsp]
	mov	esi, eax
	lea	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR i$1$[rbp], eax
	npad	2
$LL2@simd_calc_:

; 219  : 
; 220  :         //Bprim = exp( E0[i]*factor);
; 221  :         E0_vec = _mm256_loadu_pd(&E0[i]);               
; 222  :           temp_pd_0 = _mm256_mul_pd(factor_vec, E0_vec);  

	mov	rax, QWORD PTR factor_vec$[rsp]
	vmovupd	ymm1, YMMWORD PTR [rax]
	vmulpd	ymm0, ymm1, YMMWORD PTR [r12+rbx]
	vmovupd	YMMWORD PTR temp_pd_0$1$[rbp], ymm0

; 223  :         Bprim_vec = _mm256_exp_pd(temp_pd_0);                  
; 224  : 
; 225  :         //Bbis  = exp((E0[i] + nu[i])*factor);
; 226  :         nu_vec = _mm256_loadu_pd(&nu[i]);                          
; 227  :         temp_pd_1 = _mm256_fmadd_pd(nu_vec, factor_vec, temp_pd_0); 

	vfmadd231pd ymm0, ymm1, YMMWORD PTR [rbx]

; 228  :         Bbis_vec = _mm256_exp_pd(temp_pd_1);                       

	call	__vdecl_exp4
	vmovupd	YMMWORD PTR tv964[rbp], ymm0
	vmovupd	ymm0, YMMWORD PTR temp_pd_0$1$[rbp]
	call	__vdecl_exp4

; 229  : 
; 230  :         //Wi = sigma_gRmin[i]*(Bprim - Bbis);
; 231  :         temp_pd_0 = _mm256_sub_pd(Bprim_vec, Bbis_vec);            

	vsubpd	ymm1, ymm0, YMMWORD PTR tv964[rbp]

; 232  :         
; 233  :         //temp_pd_0 = _mm256_andnot_pd(sign_bit, temp_pd_0); // not needed cause Bprim > Bbis       
; 234  :         sigma_gRmin_vec = _mm256_loadu_pd(&sigma_gRmin[i]);  
; 235  :         Wi_vec = _mm256_mul_pd(sigma_gRmin_vec, temp_pd_0);     

	vmulpd	ymm2, ymm1, YMMWORD PTR [rbx+r13]

; 236  : 
; 237  :         //wi = 2*pi*c*nu[i];
; 238  :         //k = (wi - w_min) / dw;
; 239  :         //k0 = (int)k;
; 240  :         temp_pd_0 = _mm256_mul_pd(nu_vec, two_pi_c);                      
; 241  :         temp_pd_0 = _mm256_sub_pd(temp_pd_0, w_min_vec);

	mov	rax, QWORD PTR two_pi_c$[rsp]
	vmovupd	ymm1, YMMWORD PTR [rbx]
	vmovupd	YMMWORD PTR Wi_vec$1$[rbp], ymm2
	vmovupd	ymm0, YMMWORD PTR [rax]
	mov	rax, QWORD PTR w_min_vec$[rsp]
	vfmsub213pd ymm0, ymm1, YMMWORD PTR [rax]

; 242  :         k_vec     = _mm256_mul_pd(temp_pd_0, dw_recp);

	mov	rax, QWORD PTR dw_recp$[rsp]
	vmulpd	ymm1, ymm0, YMMWORD PTR [rax]

; 243  :         //k_vec = _mm256_fmsub_pd(temp_pd_0, dw_recp, w_min_norm);        //2 ms slower
; 244  :         
; 245  :         k0_vec = _mm256_cvttpd_epi32(k_vec);
; 246  :         
; 247  :         //tw = k - k0;
; 248  :         temp_pd_0 = _mm256_cvtepi32_pd(k0_vec);
; 249  :         tw_vec = _mm256_sub_pd(k_vec, temp_pd_0);
; 250  : 
; 251  :         //theta = 0.5*(2*tw - 1)*dwt = tw*dwt - 0.5*dwt;   
; 252  :         temp_pd_0 = _mm256_fmsub_pd(tw_vec, dwt_vec, h_dwt_vec);
; 253  :         sin_vec = _mm256_sincos_pd(&cos_vec, temp_pd_0);
; 254  :         
; 255  :         //aw1r =  r_sin*sin(theta) + 0.5;
; 256  :         //aw1i = -r_sin*cos(theta) + r_tan;        
; 257  :         aw1r_vec = _mm256_fmadd_pd (r_sin_vec, sin_vec, h_vec);

	mov	rax, QWORD PTR r_sin_vec$[rsp]
	vcvttpd2dq xmm6, ymm1
	vmovupd	ymm0, YMMWORD PTR [rax]
	mov	rax, QWORD PTR dwt_vec$[rsp]
	vmovupd	YMMWORD PTR aw1i_vec$1$[rbp], ymm0
	vcvtdq2pd ymm0, xmm6
	vsubpd	ymm0, ymm1, ymm0
	vmovupd	ymm1, YMMWORD PTR [rax]
	mov	rax, QWORD PTR h_dwt_vec$[rsp]
	vfmsub213pd ymm0, ymm1, YMMWORD PTR [rax]
	call	__vdecl_sincos4

; 258  :         aw1i_vec = _mm256_fnmadd_pd(r_sin_vec, cos_vec, r_tan_vec);
; 259  : 
; 260  :         //Gamma_k = (Gamma_JJ[J_clip + delta_J[i]] + Gamma_JJ[J_clip])
; 261  :         v_index_vec = _mm_loadu_si128((__m128i*)&J_clip[i]);         

	vmovdqu	xmm3, XMMWORD PTR [rdi]

; 262  :         aG1_vec     = _mm256_i32gather_pd(&aG1_arr[0], v_index_vec, DBL_SIZE);
; 263  :         aG1_Wi_vec  = _mm256_mul_pd(aG1_vec, Wi_vec);

	vmovupd	ymm10, YMMWORD PTR Wi_vec$1$[rbp]
	mov	rax, QWORD PTR r_tan_vec$[rsp]
	vmovupd	ymm9, YMMWORD PTR aw1i_vec$1$[rbp]
	vmovupd	ymm8, ymm0
	vfmadd213pd ymm8, ymm9, YMMWORD PTR [r15]
	vfnmadd213pd ymm9, ymm1, YMMWORD PTR [rax]
	mov	rax, QWORD PTR aG1_arr$[rsp]

; 264  : 
; 265  :         //Calculating addresses:
; 266  :         //DBL_SIZE * 2 *(k0_vec * N_G + l0_vec) 
; 267  :         l0_vec     = _mm_i32gather_epi32(&l0_arr[0], v_index_vec, EPI32_SIZE);

	vpcmpeqb xmm0, xmm0, xmm0
	vpcmpeqb ymm1, ymm1, ymm1
	vxorpd	xmm11, xmm11, xmm11
	vgatherdpd ymm2, YMMWORD PTR [rax+xmm3*8], ymm1
	mov	rax, QWORD PTR l0_arr$[rsp]
	vmulpd	ymm7, ymm2, ymm10
	vpgatherdd xmm1, XMMWORD PTR [rax+xmm3*4], xmm0

; 268  :         
; 269  :         temp_i32_0 = _mm_mullo_epi32(N_G_vec, k0_vec);

	vpmulld	xmm0, xmm6, XMMWORD PTR [r14]

; 270  :         temp_i32_0 = _mm_add_epi32(temp_i32_0, l0_vec);
; 271  :         temp_i32_1 = _mm_add_epi32(temp_i32_0, N_G_vec);
; 272  :         
; 273  :         //k0 index
; 274  :         temp_i32_0 = _mm_slli_epi32(temp_i32_0, 4);
; 275  :         addr_0 = _mm256_cvtepi32_epi64(temp_i32_0);
; 276  :         addr_0 = _mm256_add_epi64(S_kl_addr_vec, addr_0);

	mov	rax, QWORD PTR S_kl_addr_vec$[rsp]
	vpaddd	xmm2, xmm1, xmm0
	vpslld	xmm0, xmm2, 4
	vpmovsxdq ymm1, xmm0
	vpaddq	ymm6, ymm1, YMMWORD PTR [rax]
	vpaddd	xmm0, xmm2, XMMWORD PTR [r14]

; 277  :         
; 278  :         //k1 index (+ 2*N_G)
; 279  :         temp_i32_1 = _mm_slli_epi32(temp_i32_1, 4);

	vpslld	xmm1, xmm0, 4

; 280  :         addr_1 = _mm256_cvtepi32_epi64(temp_i32_1);

	vpmovsxdq ymm2, xmm1

; 281  :         addr_1 = _mm256_add_epi64(S_kl_addr_vec, addr_1);

	vpaddq	ymm5, ymm2, YMMWORD PTR [rax]

; 282  : 
; 283  :         //0x00, 0x55, 0xAA, 0xFF
; 284  :         ADD_LINE(0x00,0x00);

	vpermpd	ymm3, ymm7, 0
	vpextrq	rax, xmm5, 0
	vpextrq	rcx, xmm6, 0
	vpermpd	ymm0, ymm10, 0
	vsubpd	ymm1, ymm0, ymm3
	vblendpd ymm4, ymm3, ymm1, 3
	vpermpd	ymm2, ymm8, 0
	vpermpd	ymm0, ymm9, 0
	vblendpd ymm1, ymm0, ymm2, 5
	vmulpd	ymm3, ymm1, ymm4
	vaddpd	ymm0, ymm3, YMMWORD PTR [rax]
	vmovupd	YMMWORD PTR [rax], ymm0
	vblendpd ymm1, ymm4, ymm11, 10
	vsubpd	ymm2, ymm1, ymm3
	vaddpd	ymm0, ymm2, YMMWORD PTR [rcx]
	vmovupd	YMMWORD PTR [rcx], ymm0

; 285  :         ADD_LINE(0x55,0x01);

	vpermpd	ymm3, ymm7, 85				; 00000055H
	vpermpd	ymm0, ymm10, 85				; 00000055H
	vsubpd	ymm1, ymm0, ymm3
	vblendpd ymm4, ymm3, ymm1, 3
	vpermpd	ymm0, ymm9, 85				; 00000055H
	vpermpd	ymm2, ymm8, 85				; 00000055H
	vblendpd ymm1, ymm0, ymm2, 5
	vmulpd	ymm3, ymm1, ymm4
	vpextrq	rcx, xmm6, 1
	vpextrq	rax, xmm5, 1

; 218  :     for (i=0; i < Nlines; i+=4){

	lea	rbx, QWORD PTR [rbx+32]
	lea	rdi, QWORD PTR [rdi+16]

; 285  :         ADD_LINE(0x55,0x01);

	vaddpd	ymm0, ymm3, YMMWORD PTR [rax]
	vmovupd	YMMWORD PTR [rax], ymm0
	vblendpd ymm1, ymm4, ymm11, 10
	vsubpd	ymm2, ymm1, ymm3
	vaddpd	ymm0, ymm2, YMMWORD PTR [rcx]
	vmovupd	YMMWORD PTR [rcx], ymm0

; 286  :         ADD_LINE(0xAA,0x02);

	vpermpd	ymm3, ymm7, 170				; 000000aaH
	vpermpd	ymm0, ymm10, 170			; 000000aaH
	vsubpd	ymm1, ymm0, ymm3
	vblendpd ymm4, ymm3, ymm1, 3
	vpermpd	ymm0, ymm9, 170				; 000000aaH
	vpermpd	ymm2, ymm8, 170				; 000000aaH
	vblendpd ymm1, ymm0, ymm2, 5
	vmulpd	ymm3, ymm1, ymm4
	vextractf128 xmm1, ymm5, 1
	vpextrq	rax, xmm1, 0
	vblendpd ymm1, ymm4, ymm11, 10
	vsubpd	ymm2, ymm1, ymm3
	vextractf128 xmm0, ymm6, 1
	vpextrq	rcx, xmm0, 0
	vaddpd	ymm0, ymm3, YMMWORD PTR [rax]
	vmovupd	YMMWORD PTR [rax], ymm0

; 287  :         ADD_LINE(0xFF,0x03);

	vpermpd	ymm3, ymm7, 255				; 000000ffH
	vaddpd	ymm0, ymm2, YMMWORD PTR [rcx]
	vmovupd	YMMWORD PTR [rcx], ymm0
	vpermpd	ymm0, ymm10, 255			; 000000ffH
	vsubpd	ymm1, ymm0, ymm3
	vblendpd ymm4, ymm3, ymm1, 3
	vpermpd	ymm0, ymm9, 255				; 000000ffH
	vpermpd	ymm2, ymm8, 255				; 000000ffH
	vblendpd ymm1, ymm0, ymm2, 5
	vmulpd	ymm3, ymm1, ymm4
	vextractf128 xmm1, ymm5, 1
	vpextrq	rax, xmm1, 1
	vextractf128 xmm0, ymm6, 1
	vpextrq	rcx, xmm0, 1
	vblendpd ymm1, ymm4, ymm11, 10
	vaddpd	ymm0, ymm3, YMMWORD PTR [rax]
	vmovupd	YMMWORD PTR [rax], ymm0
	vsubpd	ymm2, ymm1, ymm3
	vaddpd	ymm0, ymm2, YMMWORD PTR [rcx]
	vmovupd	YMMWORD PTR [rcx], ymm0
	sub	rsi, 1
	jne	$LL2@simd_calc_

; 218  :     for (i=0; i < Nlines; i+=4){

	lea	rdx, QWORD PTR $T1[rbp]
	lea	rcx, QWORD PTR $T2[rbp]
	vzeroupper
	call	_vcomp_for_dynamic_next
	mov	r14, QWORD PTR nu$[rsp]
	mov	r15, QWORD PTR J_clip$[rsp]
	test	eax, eax
	jne	$LL5@simd_calc_
	mov	r15d, DWORD PTR $S29$1$[rbp]
	cmp	DWORD PTR $T1[rbp], r15d
	jne	SHORT $LN4@simd_calc_

; 288  :     }

	mov	rcx, QWORD PTR i$[rsp]
	mov	eax, DWORD PTR i$1$[rbp]
	mov	DWORD PTR [rcx], eax
$LN4@simd_calc_:

; 212  :     #pragma omp parallel for firstprivate(i) lastprivate(i) private(\

	lea	r11, QWORD PTR [rsp+280]
	vmovaps	xmm6, XMMWORD PTR [r11-24]
	vmovaps	xmm7, XMMWORD PTR [r11-40]
	vmovaps	xmm8, XMMWORD PTR [r11-56]
	vmovaps	xmm9, XMMWORD PTR [r11-72]
	vmovaps	xmm10, XMMWORD PTR [r11-88]
	vmovaps	xmm11, XMMWORD PTR [r11-104]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z ENDP ; simd_calc_matrix_fp64$omp$1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstdlib
;	COMDAT ?abs@@YANN@Z
_TEXT	SEGMENT
_Xx$ = 8
?abs@@YANN@Z PROC					; abs, COMDAT

; 24   :     return _CSTD fabs(_Xx);

	vandpd	xmm0, xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff

; 25   : }

	ret	0
?abs@@YANN@Z ENDP					; abs
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp
;	COMDAT ?add_flt@@YAMMM@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
?add_flt@@YAMMM@Z PROC					; add_flt, COMDAT

; 37   :     return a + b;

	vaddss	xmm0, xmm0, xmm1

; 38   : }

	ret	0
?add_flt@@YAMMM@Z ENDP					; add_flt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstdlib
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp
;	COMDAT ?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z
_TEXT	SEGMENT
tv1211 = 32
p$ = 256
T$ = 264
tv1237 = 272
tau23$ = 272
nu$ = 280
sigma_gRmin$ = 288
E0$ = 296
J_clip$ = 304
l0_arr$ = 312
aG1_arr$ = 320
w_min$ = 328
tv1239 = 336
dw$ = 336
N_w$ = 344
N_G$ = 352
chunksize$ = 360
Nlines$ = 368
Wi_arr$ = 376
S_kl$ = 384
?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z PROC ; cpp_calc_matrix_fp64, COMDAT

; 60   :                            double* S_kl) {

$LN14:
	mov	rax, rsp
	push	rdi
	push	r13
	sub	rsp, 232				; 000000e8H
	mov	r13d, DWORD PTR N_G$[rsp]
	mov	rdi, r9
	vmovaps	XMMWORD PTR [rax-56], xmm6
	vmovaps	XMMWORD PTR [rax-72], xmm7

; 61   : 
; 62   :     int i, k0, k1, l0, offset0, offset1;
; 63   :     double Bprim, Bbis;
; 64   :     double k, tw, aw0r, aw0i, aw1r, aw1i, aG0, aG1;
; 65   :     double Wi, wi, theta;
; 66   : 
; 67   :     double dwt = dw * tau23;

	vmovsd	xmm7, QWORD PTR dw$[rsp]
	vmovaps	XMMWORD PTR [rax-88], xmm8
	vmovaps	XMMWORD PTR [rax-120], xmm10
	vmovaps	XMMWORD PTR [rsp+112], xmm11

; 68   :     double r_tan = 0.5/tan(0.5*dwt);

	vmovsd	xmm11, QWORD PTR __real@3fe0000000000000
	vmovaps	XMMWORD PTR [rsp+80], xmm13
	vmulsd	xmm13, xmm2, xmm7
	vmulsd	xmm6, xmm13, xmm11
	vmovaps	xmm0, xmm6
	vmovaps	XMMWORD PTR [rsp+64], xmm14
	vmovaps	xmm8, xmm1
	call	tan
	vdivsd	xmm10, xmm11, xmm0

; 69   :     double r_sin = 0.5/sin(0.5*dwt);

	vmovaps	xmm0, xmm6
	vmovsd	QWORD PTR tv1211[rsp], xmm10
	call	sin

; 70   :     
; 71   :     unsigned long long addr0, addr1, base_addr = (unsigned long long)&S_kl[0];
; 72   :     
; 73   :     for (i=0; i < Nlines; i++){

	mov	ecx, DWORD PTR Nlines$[rsp]
	vdivsd	xmm14, xmm11, xmm0
	test	ecx, ecx
	jle	$LN3@cpp_calc_m

; 74   : 
; 75   :         
; 76   :         Bprim = exp(-h*c* E0[i]         /(k_B*T));

	mov	rax, QWORD PTR Wi_arr$[rsp]
	vmovsd	xmm0, QWORD PTR __real@44aeacd8288cb77f
	mov	QWORD PTR [rsp+256], rbx
	sub	rdi, rax
	mov	QWORD PTR [rsp+264], rbp
	mov	rbp, QWORD PTR sigma_gRmin$[rsp]
	mov	QWORD PTR [rsp+280], rsi
	mov	rsi, QWORD PTR E0$[rsp]
	mov	QWORD PTR [rsp+224], r12
	sub	rsi, rax
	mov	r12, QWORD PTR J_clip$[rsp]
	sub	rbp, rax
	mov	QWORD PTR [rsp+216], r14
	lea	r14, QWORD PTR [rax+16]
	mov	QWORD PTR [rsp+208], r15
	mov	r15, QWORD PTR S_kl$[rsp]
	vmovaps	XMMWORD PTR [rsp+144], xmm9
	vmovsd	xmm9, QWORD PTR __real@bb3803c08d4d3d33
	vmovaps	XMMWORD PTR [rsp+96], xmm12
	vmovsd	xmm12, QWORD PTR __real@3ff0000000000000
	vmovaps	XMMWORD PTR [rsp+48], xmm15
	vdivsd	xmm15, xmm0, xmm8
	vdivsd	xmm0, xmm12, xmm7
	vmovsd	QWORD PTR tv1237[rsp], xmm0
	mov	QWORD PTR tv1239[rsp], rcx
	npad	9
$LL4@cpp_calc_m:
	vmovsd	xmm6, QWORD PTR [rsi+r14-16]

; 77   :         Bbis  = exp(-h*c*(E0[i] + nu[i])/(k_B*T));

	vmovsd	xmm8, QWORD PTR [rdi+r14-16]
	vmulsd	xmm0, xmm9, xmm6
	vmulsd	xmm0, xmm0, xmm15
	call	exp
	vmulsd	xmm1, xmm6, QWORD PTR __real@3b3803c08d4d3d33
	vfmsub231sd xmm1, xmm8, xmm9
	vmovaps	xmm7, xmm0
	vmulsd	xmm0, xmm1, xmm15
	call	exp

; 79   :         Wi = sigma_gRmin[i] * abs(Bprim - Bbis); //This difference is always positive

	vsubsd	xmm1, xmm7, xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstdlib

; 24   :     return _CSTD fabs(_Xx);

	vandpd	xmm1, xmm1, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp

; 79   :         Wi = sigma_gRmin[i] * abs(Bprim - Bbis); //This difference is always positive

	vmulsd	xmm9, xmm1, QWORD PTR [r14+rbp-16]

; 80   :         
; 81   :         wi = 2*pi*c*nu[i];
; 82   :         k = (wi - w_min) / dw; //wi/dw - w_min/dw; //

	vmovsd	xmm0, QWORD PTR w_min$[rsp]
	vfmsub231sd xmm0, xmm8, QWORD PTR __real@4245edb818bd7152
	vmulsd	xmm1, xmm0, QWORD PTR tv1237[rsp]

; 83   :         k0 = (int)k;

	vcvttsd2si ebx, xmm1
	vxorpd	xmm0, xmm0, xmm0

; 84   :         k1 = k0 + 1;
; 85   :         tw = k - k0;       

	vcvtsi2sd xmm0, xmm0, ebx
	vsubsd	xmm1, xmm1, xmm0

; 86   : 
; 87   :         // if ((k0 >= 0) && (k1 < N_w)){
; 88   :         
; 89   :         
; 90   :         theta = 0.5*(2*tw - 1)*dwt;

	vsubsd	xmm2, xmm1, xmm11
	vmulsd	xmm0, xmm2, xmm13

; 91   :         aw1r =  r_sin*sin(theta) + 0.5;

	call	__libm_sse2_sincos_

; 92   :         aw1i = -r_sin*cos(theta) + r_tan;
; 93   :         aw0r = 1 - aw1r;
; 94   :         aw0i = -aw1i;
; 95   : 
; 96   :         l0 = l0_arr[J_clip[i]];
; 97   :         aG1 = aG1_arr[J_clip[i]];

	movsxd	rax, DWORD PTR [r12]

; 98   :         aG0 = 1 - aG1;
; 99   :     
; 100  :         offset0 = 2*(k0 * N_G + l0);
; 101  :         offset1 = offset0 + 2*N_G;
; 102  :         
; 103  :         addr0 = base_addr + 8*offset0;
; 104  :         addr1 = base_addr + 8*offset1;
; 105  : 
; 106  : 
; 107  :         //Wi_arr[i] = (double)addr0;
; 108  :         Wi_arr[i+0] = aw0r * aG0 * Wi;
; 109  :         Wi_arr[i+1] = aw0i * aG0 * Wi;
; 110  :         Wi_arr[i+2] = aw0r * aG1 * Wi;
; 111  :         Wi_arr[i+3] = aw0i * aG1 * Wi;

	lea	r14, QWORD PTR [r14+8]
	mov	rcx, QWORD PTR aG1_arr$[rsp]
	vmovaps	xmm4, xmm10
	vmovaps	xmm5, xmm14
	vfmadd213sd xmm5, xmm0, xmm11
	vmovsd	xmm7, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR l0_arr$[rsp]
	vpermilpd xmm0, xmm0, 1
	vfnmadd231sd xmm4, xmm14, xmm0
	vxorpd	xmm8, xmm4, QWORD PTR __xmm@80000000000000008000000000000000
	mov	ecx, DWORD PTR [rcx+rax*4]
	vsubsd	xmm3, xmm12, xmm7
	vsubsd	xmm10, xmm12, xmm5
	vmulsd	xmm0, xmm3, xmm10
	vmulsd	xmm1, xmm0, xmm9
	vmovsd	QWORD PTR [r14-24], xmm1
	vmulsd	xmm2, xmm3, xmm8
	vmulsd	xmm0, xmm2, xmm9
	vmovsd	QWORD PTR [r14-16], xmm0

; 112  :         
; 113  :         S_kl[offset1 + 0] += aw1r * aG0 * Wi;

	vmovddup xmm6, xmm3
	imul	ebx, r13d
	vmulsd	xmm1, xmm7, xmm10
	vmulsd	xmm2, xmm1, xmm9
	vmovsd	QWORD PTR [r14-8], xmm2
	vmulsd	xmm0, xmm7, xmm8
	vmulsd	xmm1, xmm0, xmm9
	vmovsd	QWORD PTR [r14], xmm1
	add	ecx, ebx
	vmovaps	xmm1, xmm4
	vmovddup xmm4, xmm9
	vmovaps	xmm0, xmm5
	vunpcklpd xmm2, xmm0, xmm1
	lea	eax, DWORD PTR [rcx+r13]
	vmulpd	xmm0, xmm2, xmm6
	add	eax, eax
	lea	edx, DWORD PTR [rcx+rcx]
	movsxd	rcx, eax

; 114  :         S_kl[offset1 + 1] += aw1i * aG0 * Wi;        
; 115  :         S_kl[offset1 + 2] += aw1r * aG1 * Wi;
; 116  :         S_kl[offset1 + 3] += aw1i * aG1 * Wi;
; 117  : 
; 118  :         S_kl[offset0 + 0] += aw0r * aG0 * Wi;

	movsxd	rax, edx
	vmovddup xmm3, xmm7
	vmovupd	xmm1, XMMWORD PTR [r15+rcx*8]
	vfmadd231pd xmm1, xmm0, xmm4
	vmovupd	XMMWORD PTR [r15+rcx*8], xmm1
	vmovupd	xmm1, XMMWORD PTR [r15+rcx*8+16]
	vmulpd	xmm0, xmm3, xmm2
	vfmadd231pd xmm1, xmm0, xmm4
	vmovupd	XMMWORD PTR [r15+rcx*8+16], xmm1
	vmovaps	xmm1, xmm8
	vmovaps	xmm0, xmm10
	vunpcklpd xmm2, xmm0, xmm1
	vmovupd	xmm1, XMMWORD PTR [r15+rax*8]
	vmulpd	xmm0, xmm2, xmm6
	vfmadd231pd xmm1, xmm0, xmm4
	vmovupd	XMMWORD PTR [r15+rax*8], xmm1

; 119  :         S_kl[offset0 + 1] += aw0i * aG0 * Wi;        
; 120  :         S_kl[offset0 + 2] += aw0r * aG1 * Wi;

	vmovupd	xmm1, XMMWORD PTR [r15+rax*8+16]
	vmulpd	xmm0, xmm2, xmm3
	vfmadd231pd xmm1, xmm0, xmm4
	vmovupd	XMMWORD PTR [r15+rax*8+16], xmm1

; 70   :     
; 71   :     unsigned long long addr0, addr1, base_addr = (unsigned long long)&S_kl[0];
; 72   :     
; 73   :     for (i=0; i < Nlines; i++){

	sub	QWORD PTR tv1239[rsp], 1
	lea	r12, QWORD PTR [r12+4]
	vmovsd	xmm9, QWORD PTR __real@bb3803c08d4d3d33
	vmovsd	xmm10, QWORD PTR tv1211[rsp]
	jne	$LL4@cpp_calc_m
	vmovaps	xmm15, XMMWORD PTR [rsp+48]
	vmovaps	xmm12, XMMWORD PTR [rsp+96]
	vmovaps	xmm9, XMMWORD PTR [rsp+144]
	mov	r15, QWORD PTR [rsp+208]
	mov	r14, QWORD PTR [rsp+216]
	mov	r12, QWORD PTR [rsp+224]
	mov	rsi, QWORD PTR [rsp+280]
	mov	rbp, QWORD PTR [rsp+264]
	mov	rbx, QWORD PTR [rsp+256]
$LN3@cpp_calc_m:

; 121  :         S_kl[offset0 + 3] += aw0i * aG1 * Wi;
; 122  :     
; 123  : 
; 124  :         // }
; 125  :     }    
; 126  : }

	vmovaps	xmm13, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+232]
	vmovaps	xmm6, XMMWORD PTR [r11-40]
	vmovaps	xmm7, XMMWORD PTR [r11-56]
	vmovaps	xmm8, XMMWORD PTR [r11-72]
	vmovaps	xmm10, XMMWORD PTR [r11-104]
	vmovaps	xmm11, XMMWORD PTR [r11-120]
	vmovaps	xmm14, XMMWORD PTR [rsp+64]
	mov	rsp, r11
	pop	r13
	pop	rdi
	ret	0
?cpp_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z ENDP ; cpp_calc_matrix_fp64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp
;	COMDAT ?simd_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z
_TEXT	SEGMENT
i$ = 0
N_G_vec$ = 16
factor_vec$ = 32
two_pi_c$ = 64
dw_recp$ = 96
w_min_vec$ = 128
r_sin_vec$ = 160
r_tan_vec$ = 192
dwt_vec$ = 224
h_dwt_vec$ = 256
h_vec$ = 288
S_kl_addr_vec$ = 320
p$ = 640
T$ = 648
tau23$ = 656
nu$ = 664
sigma_gRmin$ = 672
E0$ = 680
J_clip$ = 688
l0_arr$ = 696
aG1_arr$ = 704
w_min$ = 712
dw$ = 720
N_w$ = 728
N_G$ = 736
chunksize$ = 744
Nlines$ = 752
Wi_arr$ = 760
S_kl$ = 768
?simd_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z PROC ; simd_calc_matrix_fp64, COMDAT

; 180  :                            double* S_kl) {

$LN2:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	push	rbp
	sub	rsp, 624				; 00000270H
	vmovaps	XMMWORD PTR [rax-24], xmm6
	vmovaps	XMMWORD PTR [rax-40], xmm7
	vmovaps	XMMWORD PTR [rax-56], xmm8
	lea	rbp, QWORD PTR [rax-408]
	and	rbp, -32				; ffffffffffffffe0H

; 181  : 
; 182  :     int i;
; 183  :     double dwt = dw * tau23;

	vmulsd	xmm8, xmm2, QWORD PTR dw$[rsp]

; 184  :     double* S_k0l;
; 185  :     double* S_k1l;
; 186  :     
; 187  :     __m256d E0_vec, nu_vec;
; 188  :     __m256d Bprim_vec, Bbis_vec, Wi_vec, k_vec, sigma_gRmin_vec; //l_vec, Gamma_k_vec,
; 189  :     __m256d temp_pd_0, temp_pd_1, temp_pd_2;
; 190  :     __m128i v_index_vec, temp_i32_0, temp_i32_1, k0_vec, l0_vec;
; 191  :     __m256i addr_0, addr_1;
; 192  : 
; 193  :     __m256d tw_vec;//, tG_vec;
; 194  :     __m256d sin_vec, cos_vec;
; 195  :     
; 196  :     __m256d aw1r_vec, aw1i_vec, aG1_vec, aG1_Wi_vec;    
; 197  :     
; 198  :     __m256d factor_vec = _mm256_set1_pd(-h*c/(k_B*T));     

	vmovsd	xmm0, QWORD PTR __real@bff7053ae731ed22

; 199  :     __m256d two_pi_c   = _mm256_set1_pd(2*pi*c);             
; 200  :     __m256d dw_recp    = _mm256_set1_pd(1.0/dw);            
; 201  :     __m256d w_min_vec  = _mm256_set1_pd(w_min);  
; 202  :     __m256d w_min_norm = _mm256_set1_pd(w_min/dw);              
; 203  :     __m256d r_sin_vec  = _mm256_set1_pd(0.5/sin(0.5*dwt));

	vmovsd	xmm6, QWORD PTR __real@3fe0000000000000
	vdivsd	xmm1, xmm0, xmm1
	vmovupd	ymm0, YMMWORD PTR __ymm@4245edb818bd71524245edb818bd71524245edb818bd71524245edb818bd7152
	vbroadcastsd ymm1, xmm1
	vmovupd	YMMWORD PTR two_pi_c$[rbp], ymm0
	vbroadcastsd ymm0, QWORD PTR w_min$[rsp]
	vmovupd	YMMWORD PTR factor_vec$[rbp], ymm1
	vmovsd	xmm1, QWORD PTR __real@3ff0000000000000
	vdivsd	xmm2, xmm1, QWORD PTR dw$[rsp]
	vmulsd	xmm7, xmm8, xmm6
	vbroadcastsd ymm2, xmm2
	vmovupd	YMMWORD PTR w_min_vec$[rbp], ymm0
	vmovaps	xmm0, xmm7
	vmovupd	YMMWORD PTR dw_recp$[rbp], ymm2
	mov	rbx, r9
	vzeroupper
	call	sin
	vdivsd	xmm1, xmm6, xmm0
	vbroadcastsd ymm1, xmm1

; 204  :     __m256d r_tan_vec  = _mm256_set1_pd(0.5/tan(0.5*dwt));

	vmovaps	xmm0, xmm7
	vmovupd	YMMWORD PTR r_sin_vec$[rbp], ymm1
	vzeroupper
	call	tan
	vdivsd	xmm1, xmm6, xmm0
	vbroadcastsd ymm1, xmm1
	vmovupd	YMMWORD PTR r_tan_vec$[rbp], ymm1

; 205  :     __m256d dwt_vec    = _mm256_set1_pd(dwt); 
; 206  :     __m256d h_dwt_vec  = _mm256_set1_pd(0.5*dwt);
; 207  :     __m256d h_vec      = _mm256_set1_pd(0.5);
; 208  :     __m128i N_G_vec    = _mm_set1_epi32(N_G);
; 209  :     __m256i S_kl_addr_vec = _mm256_set1_epi64x((unsigned long long)&S_kl[0]);
; 210  : 
; 211  : 
; 212  :     #pragma omp parallel for firstprivate(i) lastprivate(i) private(\
; 213  :     E0_vec, temp_pd_0, Bprim_vec, nu_vec, temp_pd_1, Bbis_vec, sigma_gRmin_vec, \
; 214  :     Wi_vec, k_vec, k0_vec, tw_vec, sin_vec, cos_vec, aw1r_vec, aw1i_vec, v_index_vec, \
; 215  :     aG1_vec, aG1_Wi_vec, l0_vec, temp_i32_0, temp_i32_1, addr_0, addr_1, \
; 216  :     temp_pd_2, S_k0l, S_k1l) \
; 217  :     schedule(dynamic, chunksize)

	lea	rax, QWORD PTR Nlines$[rsp]
	mov	edx, 20
	mov	QWORD PTR [rsp+176], rax
	lea	r9, QWORD PTR i$[rbp]
	lea	rax, QWORD PTR chunksize$[rsp]
	mov	QWORD PTR [rsp+168], rax
	lea	r8, OFFSET FLAT:?simd_calc_matrix_fp64$omp$1@@YAXNNNPEAN00PEAH10NNHHHH00@Z ; simd_calc_matrix_fp64$omp$1
	mov	rax, QWORD PTR aG1_arr$[rsp]
	mov	QWORD PTR [rsp+160], rax
	mov	rax, QWORD PTR l0_arr$[rsp]
	mov	QWORD PTR [rsp+152], rax
	mov	rax, QWORD PTR J_clip$[rsp]
	mov	QWORD PTR [rsp+144], rax
	mov	rax, QWORD PTR E0$[rsp]
	mov	QWORD PTR [rsp+136], rax
	mov	rax, QWORD PTR sigma_gRmin$[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR factor_vec$[rbp]
	mov	QWORD PTR [rsp+120], rbx
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR two_pi_c$[rbp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR dw_recp$[rbp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR w_min_vec$[rbp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR r_sin_vec$[rbp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR r_tan_vec$[rbp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR dwt_vec$[rbp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR h_dwt_vec$[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR h_vec$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR N_G_vec$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR S_kl_addr_vec$[rbp]
	vmovaps	xmm0, xmm8
	vbroadcastsd ymm0, xmm0
	vmovupd	YMMWORD PTR dwt_vec$[rbp], ymm0
	vmovupd	ymm0, YMMWORD PTR __ymm@3fe00000000000003fe00000000000003fe00000000000003fe0000000000000
	vmovupd	YMMWORD PTR h_vec$[rbp], ymm0
	vpbroadcastq ymm0, QWORD PTR S_kl$[rsp]
	vmovaps	xmm1, xmm7
	vbroadcastsd ymm1, xmm7
	vmovupd	YMMWORD PTR h_dwt_vec$[rbp], ymm1
	vpbroadcastd xmm1, DWORD PTR N_G$[rsp]
	vmovdqu	XMMWORD PTR N_G_vec$[rbp], xmm1
	vmovdqu	YMMWORD PTR S_kl_addr_vec$[rbp], ymm0
	mov	QWORD PTR [rsp+32], rax
	npad	1
	lea	ecx, QWORD PTR [rdx-19]
	vzeroupper
	call	_vcomp_fork
	npad	1

; 218  :     for (i=0; i < Nlines; i+=4){
; 219  : 
; 220  :         //Bprim = exp( E0[i]*factor);
; 221  :         E0_vec = _mm256_loadu_pd(&E0[i]);               
; 222  :           temp_pd_0 = _mm256_mul_pd(factor_vec, E0_vec);  
; 223  :         Bprim_vec = _mm256_exp_pd(temp_pd_0);                  
; 224  : 
; 225  :         //Bbis  = exp((E0[i] + nu[i])*factor);
; 226  :         nu_vec = _mm256_loadu_pd(&nu[i]);                          
; 227  :         temp_pd_1 = _mm256_fmadd_pd(nu_vec, factor_vec, temp_pd_0); 
; 228  :         Bbis_vec = _mm256_exp_pd(temp_pd_1);                       
; 229  : 
; 230  :         //Wi = sigma_gRmin[i]*(Bprim - Bbis);
; 231  :         temp_pd_0 = _mm256_sub_pd(Bprim_vec, Bbis_vec);            
; 232  :         
; 233  :         //temp_pd_0 = _mm256_andnot_pd(sign_bit, temp_pd_0); // not needed cause Bprim > Bbis       
; 234  :         sigma_gRmin_vec = _mm256_loadu_pd(&sigma_gRmin[i]);  
; 235  :         Wi_vec = _mm256_mul_pd(sigma_gRmin_vec, temp_pd_0);     
; 236  : 
; 237  :         //wi = 2*pi*c*nu[i];
; 238  :         //k = (wi - w_min) / dw;
; 239  :         //k0 = (int)k;
; 240  :         temp_pd_0 = _mm256_mul_pd(nu_vec, two_pi_c);                      
; 241  :         temp_pd_0 = _mm256_sub_pd(temp_pd_0, w_min_vec);
; 242  :         k_vec     = _mm256_mul_pd(temp_pd_0, dw_recp);
; 243  :         //k_vec = _mm256_fmsub_pd(temp_pd_0, dw_recp, w_min_norm);        //2 ms slower
; 244  :         
; 245  :         k0_vec = _mm256_cvttpd_epi32(k_vec);
; 246  :         
; 247  :         //tw = k - k0;
; 248  :         temp_pd_0 = _mm256_cvtepi32_pd(k0_vec);
; 249  :         tw_vec = _mm256_sub_pd(k_vec, temp_pd_0);
; 250  : 
; 251  :         //theta = 0.5*(2*tw - 1)*dwt = tw*dwt - 0.5*dwt;   
; 252  :         temp_pd_0 = _mm256_fmsub_pd(tw_vec, dwt_vec, h_dwt_vec);
; 253  :         sin_vec = _mm256_sincos_pd(&cos_vec, temp_pd_0);
; 254  :         
; 255  :         //aw1r =  r_sin*sin(theta) + 0.5;
; 256  :         //aw1i = -r_sin*cos(theta) + r_tan;        
; 257  :         aw1r_vec = _mm256_fmadd_pd (r_sin_vec, sin_vec, h_vec);
; 258  :         aw1i_vec = _mm256_fnmadd_pd(r_sin_vec, cos_vec, r_tan_vec);
; 259  : 
; 260  :         //Gamma_k = (Gamma_JJ[J_clip + delta_J[i]] + Gamma_JJ[J_clip])
; 261  :         v_index_vec = _mm_loadu_si128((__m128i*)&J_clip[i]);         
; 262  :         aG1_vec     = _mm256_i32gather_pd(&aG1_arr[0], v_index_vec, DBL_SIZE);
; 263  :         aG1_Wi_vec  = _mm256_mul_pd(aG1_vec, Wi_vec);
; 264  : 
; 265  :         //Calculating addresses:
; 266  :         //DBL_SIZE * 2 *(k0_vec * N_G + l0_vec) 
; 267  :         l0_vec     = _mm_i32gather_epi32(&l0_arr[0], v_index_vec, EPI32_SIZE);
; 268  :         
; 269  :         temp_i32_0 = _mm_mullo_epi32(N_G_vec, k0_vec);
; 270  :         temp_i32_0 = _mm_add_epi32(temp_i32_0, l0_vec);
; 271  :         temp_i32_1 = _mm_add_epi32(temp_i32_0, N_G_vec);
; 272  :         
; 273  :         //k0 index
; 274  :         temp_i32_0 = _mm_slli_epi32(temp_i32_0, 4);
; 275  :         addr_0 = _mm256_cvtepi32_epi64(temp_i32_0);
; 276  :         addr_0 = _mm256_add_epi64(S_kl_addr_vec, addr_0);
; 277  :         
; 278  :         //k1 index (+ 2*N_G)
; 279  :         temp_i32_1 = _mm_slli_epi32(temp_i32_1, 4);
; 280  :         addr_1 = _mm256_cvtepi32_epi64(temp_i32_1);
; 281  :         addr_1 = _mm256_add_epi64(S_kl_addr_vec, addr_1);
; 282  : 
; 283  :         //0x00, 0x55, 0xAA, 0xFF
; 284  :         ADD_LINE(0x00,0x00);
; 285  :         ADD_LINE(0x55,0x01);
; 286  :         ADD_LINE(0xAA,0x02);
; 287  :         ADD_LINE(0xFF,0x03);
; 288  :     }
; 289  : };

	lea	r11, QWORD PTR [rsp+624]
	mov	rbx, QWORD PTR [r11+16]
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	vmovaps	xmm7, XMMWORD PTR [r11-32]
	vmovaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	rbp
	ret	0
?simd_calc_matrix_fp64@@YAXNNNPEAN00PEAH10NNHHHH00@Z ENDP ; simd_calc_matrix_fp64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp
;	COMDAT ?cpp_mult1_fp64@@YAXHHNPEAN00@Z
_TEXT	SEGMENT
N_t$ = 176
N_G$ = 184
tau23$ = 192
w_arr$ = 200
S_kl$ = 208
S_kl_a$ = 216
?cpp_mult1_fp64@@YAXHHNPEAN00@Z PROC			; cpp_mult1_fp64, COMDAT

; 296  :                     double* S_kl_a){

$LN19:

; 297  :     
; 298  :     int k,ll;
; 299  :     double theta0, sr0, si0, Sr0, Si0;    
; 300  :     double theta1, sr1, si1, Sr1, Si1;    
; 301  :     
; 302  :     for (k=0; k<N_t; k+=2){

	test	ecx, ecx
	jle	$LN17@cpp_mult1_

; 296  :                     double* S_kl_a){

	mov	rax, rsp
	mov	DWORD PTR [rax+8], ecx
	push	rbx
	sub	rsp, 160				; 000000a0H
	vmovaps	XMMWORD PTR [rax-120], xmm10
	mov	rbx, r9
	mov	QWORD PTR [rax+16], rbp
	mov	rbp, QWORD PTR S_kl_a$[rsp]
	mov	QWORD PTR [rax+24], rsi
	add	rbp, 16
	mov	QWORD PTR [rax+32], rdi
	xor	esi, esi
	mov	QWORD PTR [rax-16], r12
	lea	r12d, DWORD PTR [rcx-1]
	mov	QWORD PTR [rax-24], r13
	lea	r13d, DWORD PTR [rdx+rdx]
	mov	QWORD PTR [rax-32], r14
	mov	r14, QWORD PTR S_kl$[rsp]
	mov	QWORD PTR [rax-40], r15
	add	r14, 8
	vmovaps	XMMWORD PTR [rax-56], xmm6
	vmovaps	XMMWORD PTR [rax-72], xmm7
	vmovaps	XMMWORD PTR [rax-88], xmm8
	vmovaps	XMMWORD PTR [rax-104], xmm9
	lea	eax, DWORD PTR [rdx*4]
	movsxd	rdi, r13d
	shr	r12d, 1
	vmovaps	XMMWORD PTR [rsp+32], xmm11
	inc	r12d
	vmovsd	xmm11, QWORD PTR __real@3ff921fb54442d18
	movsxd	r15, eax
	lea	r14, QWORD PTR [r14+rdi*8]
	vmovaps	xmm10, xmm2
	npad	7
$LL4@cpp_mult1_:

; 303  :         theta0 = tau23*w_arr[k  ];

	vmulsd	xmm6, xmm10, QWORD PTR [rbx]

; 304  :         theta1 = tau23*w_arr[k+1];

	vmulsd	xmm7, xmm10, QWORD PTR [rbx+8]

; 305  :         
; 306  :         sr0 = sin(0.5*pi - theta0); // cos(theta0)

	vsubsd	xmm0, xmm11, xmm6
	call	sin
	vmovaps	xmm8, xmm0

; 307  :         si0 = sin(         theta0);

	vmovaps	xmm0, xmm6
	call	sin
	vmovaps	xmm6, xmm0

; 308  :         sr1 = sin(0.5*pi - theta1); // cos(theta1)

	vsubsd	xmm0, xmm11, xmm7
	call	sin
	vmovaps	xmm9, xmm0

; 309  :         si1 = sin(         theta1);

	vmovaps	xmm0, xmm7
	call	sin
	vmovaps	xmm5, xmm0

; 310  :         
; 311  :         for (ll=0; ll<2*N_G; ll+=2){ 

	test	r13d, r13d
	jle	$LN2@cpp_mult1_

; 303  :         theta0 = tau23*w_arr[k  ];

	mov	eax, DWORD PTR N_t$[rsp]
	lea	r10d, DWORD PTR [r13-1]
	add	eax, eax
	shr	r10d, 1
	movsxd	r9, eax
	mov	r8, rsi
	shl	r9, 3
	sub	r8, rdi
	inc	r10d
	mov	rcx, r14
	mov	rdx, rbp
	npad	4
$LL7@cpp_mult1_:

; 312  :             Sr0 = S_kl[2*k*N_G       + ll  ];
; 313  :             Si0 = S_kl[2*k*N_G       + ll+1];

	vmovsd	xmm1, QWORD PTR [rcx+r8*8]
	vmovsd	xmm2, QWORD PTR [rcx+r8*8-8]

; 314  :             Sr1 = S_kl[2*k*N_G+2*N_G + ll  ];

	vmovsd	xmm4, QWORD PTR [rcx-8]

; 315  :             Si1 = S_kl[2*k*N_G+2*N_G + ll+1];

	vmovsd	xmm3, QWORD PTR [rcx]

; 316  :             
; 317  :             S_kl_a[ll*N_t + 2*k  ] = Sr0*sr0 - Si0*si0;

	vmulsd	xmm0, xmm6, xmm1

; 318  :             S_kl_a[ll*N_t + 2*k+1] = Sr0*si0 + Si0*sr0;

	vmulsd	xmm1, xmm8, xmm1
	vfmadd231sd xmm1, xmm6, xmm2
	vfmsub231sd xmm0, xmm8, xmm2
	vmovsd	QWORD PTR [rdx-8], xmm1
	vmovsd	QWORD PTR [rdx-16], xmm0

; 319  :             S_kl_a[ll*N_t + 2*k+2] = Sr1*sr1 - Si1*si1;
; 320  :             S_kl_a[ll*N_t + 2*k+3] = Sr1*si1 + Si1*sr1;

	vmulsd	xmm1, xmm9, xmm3
	vmulsd	xmm0, xmm5, xmm3
	vfmadd231sd xmm1, xmm5, xmm4
	vfmsub231sd xmm0, xmm9, xmm4
	vmovsd	QWORD PTR [rdx+8], xmm1
	vmovsd	QWORD PTR [rdx], xmm0
	add	rdx, r9
	lea	rcx, QWORD PTR [rcx+16]
	sub	r10, 1
	jne	SHORT $LL7@cpp_mult1_
$LN2@cpp_mult1_:

; 297  :     
; 298  :     int k,ll;
; 299  :     double theta0, sr0, si0, Sr0, Si0;    
; 300  :     double theta1, sr1, si1, Sr1, Si1;    
; 301  :     
; 302  :     for (k=0; k<N_t; k+=2){

	lea	rax, QWORD PTR [r15*8]
	add	rdi, r15
	add	r14, rax
	add	rbp, 32					; 00000020H
	add	rsi, r15
	add	rbx, 16
	sub	r12, 1
	jne	$LL4@cpp_mult1_
	vmovaps	xmm11, XMMWORD PTR [rsp+32]
	vmovaps	xmm9, XMMWORD PTR [rsp+64]
	vmovaps	xmm8, XMMWORD PTR [rsp+80]
	vmovaps	xmm7, XMMWORD PTR [rsp+96]
	vmovaps	xmm6, XMMWORD PTR [rsp+112]
	mov	r15, QWORD PTR [rsp+128]
	mov	r14, QWORD PTR [rsp+136]
	mov	r13, QWORD PTR [rsp+144]
	mov	r12, QWORD PTR [rsp+152]
	mov	rdi, QWORD PTR [rsp+200]
	mov	rsi, QWORD PTR [rsp+192]
	mov	rbp, QWORD PTR [rsp+184]

; 321  :         };
; 322  :     };
; 323  : };

	vmovaps	xmm10, XMMWORD PTR [rsp+48]
	add	rsp, 160				; 000000a0H
	pop	rbx
$LN17@cpp_mult1_:
	ret	0
?cpp_mult1_fp64@@YAXHHNPEAN00@Z ENDP			; cpp_mult1_fp64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp
;	COMDAT ?simd_mult1_fp64@@YAXHHNPEAN00@Z
_TEXT	SEGMENT
N_t$ = 80
N_G$ = 88
tau23$ = 96
w_arr$ = 104
S_kl$ = 112
S_kl_a$ = 120
?simd_mult1_fp64@@YAXHHNPEAN00@Z PROC			; simd_mult1_fp64, COMDAT

; 332  :                     double* S_kl_a){

$LN19:
	push	rsi
	push	r13
	sub	rsp, 56					; 00000038H
	mov	rsi, r9
	mov	r13d, ecx

; 333  :     
; 334  :     int k,ll;
; 335  : 	__m256d hpi_vec = {0.5*pi, 0.0, 0.5*pi, 0.0};

	vmovupd	ymm2, YMMWORD PTR __ymm@00000000000000003ff921fb54442d1800000000000000003ff921fb54442d18

; 336  : 	__m256d temp_pd_0, temp_pd_1, sA_vec, sB_vec, Sr_vec, Si_vec;
; 337  : 	double* base_addr0;
; 338  : 
; 339  :     for (k=0; k<N_t; k+=2){

	test	ecx, ecx
	jle	$LN3@simd_mult1

; 333  :     
; 334  :     int k,ll;
; 335  : 	__m256d hpi_vec = {0.5*pi, 0.0, 0.5*pi, 0.0};

	mov	QWORD PTR [rsp+80], rbx
	lea	eax, DWORD PTR [rdx*4]
	mov	rbx, QWORD PTR S_kl$[rsp]
	mov	QWORD PTR [rsp+88], rdi
	mov	rdi, QWORD PTR S_kl_a$[rsp]
	mov	QWORD PTR [rsp+96], r12
	mov	QWORD PTR [rsp+104], r14
	lea	r14d, DWORD PTR [rdx+rdx]
	mov	QWORD PTR [rsp+48], r15
	lea	r15d, DWORD PTR [rcx-1]
	movsxd	r12, eax
	shr	r15d, 1
	shl	r12, 3
	inc	r15d
	vmovaps	XMMWORD PTR [rsp+32], xmm6
	npad	13
$LL4@simd_mult1:

; 340  :         //theta0 = tau23*w_arr[k  ];
; 341  :         //theta1 = tau23*w_arr[k+1];
; 342  : 		temp_pd_0 = _mm256_broadcast_pd(reinterpret_cast<__m128d*>(&w_arr[k]));     //{theta0, theta1, theta0, theta1}

	vbroadcastf128 ymm0, XMMWORD PTR [rsi]

; 343  : 		temp_pd_0 = _mm256_permute_pd(temp_pd_0, 0x0C); //{theta0, theta0, theta1, theta1}

	vpermilpd ymm1, ymm0, 12

; 344  : 		
; 345  :         //sr0 = sin(0.5*pi - theta0); // cos(theta0)
; 346  :         //si0 = sin(         theta0);
; 347  :         //sr1 = sin(0.5*pi - theta1); // cos(theta1)
; 348  :         //si1 = sin(         theta1);		
; 349  : 		temp_pd_0 = _mm256_addsub_pd(hpi_vec, temp_pd_0);

	vaddsubpd ymm0, ymm2, ymm1

; 350  : 		sA_vec = _mm256_sin_pd(temp_pd_0);

	call	__vdecl_sin4
	xor	edx, edx
	vmovupd	ymm5, ymm0

; 351  : 		sB_vec = _mm256_shuffle_pd(sA_vec, sA_vec, 0x05); //0b000000101

	vshufpd	ymm6, ymm0, ymm0, 5

; 352  : 		base_addr0 = &S_kl[2*k*N_G];
; 353  : 		
; 354  :         for (ll=0; ll<2*N_G; ll+=2){ 

	test	r14d, r14d
	jle	SHORT $LN2@simd_mult1

; 343  : 		temp_pd_0 = _mm256_permute_pd(temp_pd_0, 0x0C); //{theta0, theta0, theta1, theta1}

	lea	eax, DWORD PTR [r13*2]
	mov	r10, rbx
	movsxd	r8, eax
	mov	r9, rdi
	shl	r8, 3
	npad	7
$LL7@simd_mult1:

; 355  :             //Sr0 = base_addr[        ll  ];
; 356  :             //Si0 = base_addr[        ll+1];
; 357  :             //Sr1 = base_addr[2*N_G + ll  ];
; 358  :             //Si1 = base_addr[2*N_G + ll+1];
; 359  : 			temp_pd_0 = _mm256_broadcast_pd(reinterpret_cast<__m128d*>(&base_addr0[ll]));

	vbroadcastf128 ymm4, XMMWORD PTR [r10]

; 360  : 			temp_pd_1 = _mm256_broadcast_pd(reinterpret_cast<__m128d*>(&base_addr0[ll + 2*N_G]));

	lea	eax, DWORD PTR [r14+rdx]
	add	edx, 2
	movsxd	rcx, eax
	lea	r10, QWORD PTR [r10+16]
	vbroadcastf128 ymm2, XMMWORD PTR [rbx+rcx*8]

; 361  : 			
; 362  : 			Sr_vec = _mm256_shuffle_pd(temp_pd_0, temp_pd_1, 0x00); //0b00000000
; 363  :             Si_vec = _mm256_shuffle_pd(temp_pd_0, temp_pd_1, 0x0F); //0b00001111

	vshufpd	ymm0, ymm4, ymm2, 15

; 364  : 			Sr_vec = _mm256_permute_pd(Sr_vec, 0x0C);//0b00001100
; 365  : 			Si_vec = _mm256_permute_pd(Si_vec, 0x0C);//0b00001100

	vpermilpd ymm1, ymm0, 12
	vshufpd	ymm2, ymm4, ymm2, 0

; 366  : 			
; 367  :             //S_kl_a[ll*N_t + 2*k  ] = Sr0*sr0 - Si0*si0;
; 368  :             //S_kl_a[ll*N_t + 2*k+1] = Sr0*si0 + Si0*sr0;
; 369  :             //S_kl_a[ll*N_t + 2*k+2] = Sr1*sr1 - Si1*si1;
; 370  :             //S_kl_a[ll*N_t + 2*k+3] = Sr1*si1 + Si1*sr1;
; 371  : 			temp_pd_0 = _mm256_mul_pd(Si_vec, sB_vec);

	vmulpd	ymm3, ymm1, ymm6
	vpermilpd ymm0, ymm2, 12

; 372  : 			temp_pd_0 = _mm256_fmsubadd_pd(Sr_vec, sA_vec, temp_pd_0);

	vfmsubadd231pd ymm3, ymm0, ymm5

; 373  : 			_mm256_storeu_pd(&S_kl_a[ll*N_t + 2*k], temp_pd_0); 

	vmovupd	YMMWORD PTR [r9], ymm3
	add	r9, r8
	cmp	edx, r14d
	jl	SHORT $LL7@simd_mult1
$LN2@simd_mult1:

; 336  : 	__m256d temp_pd_0, temp_pd_1, sA_vec, sB_vec, Sr_vec, Si_vec;
; 337  : 	double* base_addr0;
; 338  : 
; 339  :     for (k=0; k<N_t; k+=2){

	vmovupd	ymm2, YMMWORD PTR __ymm@00000000000000003ff921fb54442d1800000000000000003ff921fb54442d18
	add	rsi, 16
	add	rbx, r12
	add	rdi, 32					; 00000020H
	sub	r15, 1
	jne	$LL4@simd_mult1
	vmovaps	xmm6, XMMWORD PTR [rsp+32]
	mov	r15, QWORD PTR [rsp+48]
	mov	r14, QWORD PTR [rsp+104]
	mov	r12, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
$LN3@simd_mult1:

; 374  : 			
; 375  :         };
; 376  :     };
; 377  : };

	vzeroupper
	add	rsp, 56					; 00000038H
	pop	r13
	pop	rsi
	ret	0
?simd_mult1_fp64@@YAXHHNPEAN00@Z ENDP			; simd_mult1_fp64
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\dcmvd\Documents\GitHub\fast-crs\cython\crs_cpp.cpp
;	COMDAT ?simd_mult2_fp64@@YAXHHNNNPEAN000@Z
_TEXT	SEGMENT
tv790 = 0
tau_vec$1$ = 32
N_t_vec$1$ = 64
G_l_vec$1$ = 96
N_G$ = 288
N_t$ = 296
tau23$ = 304
log_G_min$ = 312
dxG$ = 320
E_probe$ = 328
t_arr$ = 336
S_kl$ = 344
E_CARS$ = 352
?simd_mult2_fp64@@YAXHHNNNPEAN000@Z PROC		; simd_mult2_fp64, COMDAT

; 419  :                             double* E_CARS){

$LN18:
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	mov	DWORD PTR [rax+8], ecx
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 240				; 000000f0H
	vmovaps	XMMWORD PTR [rax-56], xmm6
	vmovaps	XMMWORD PTR [rax-72], xmm7
	vmovaps	XMMWORD PTR [rax-88], xmm8
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
	vmovsd	xmm8, QWORD PTR dxG$[rsp]
	vxorps	xmm0, xmm0, xmm0

; 420  :     
; 421  :     int l, k;
; 422  :     double G_l;
; 423  :     __m256d N_t_vec = _mm256_set1_pd(N_t);

	vcvtsi2sd xmm0, xmm0, edx
	vbroadcastsd ymm0, xmm0
	vmovupd	YMMWORD PTR N_t_vec$1$[rbp], ymm0

; 424  :     double* base_addr;   
; 425  :     __m256d G_l_vec, factor_vec, t_arr_vec, temp_pd_0, probe_vec, temp_probe_vec, temp_factor_vec, chi_vec, E_CARS_vec;
; 426  : 	
; 427  : 	__m256d tau_vec = _mm256_set1_pd(tau23);

	vmovaps	xmm0, xmm2
	xor	r14d, r14d

; 432  :         base_addr = &S_kl[2*N_t*l]; 
; 433  :         
; 434  :         for (k=0; k<N_t; k+=4){

	movsxd	r13, edx
	vbroadcastsd ymm0, xmm2
	vmovupd	YMMWORD PTR tau_vec$1$[rbp], ymm0
	vmovaps	xmm7, xmm3
	test	ecx, ecx
	jle	$LN3@simd_mult2

; 420  :     
; 421  :     int l, k;
; 422  :     double G_l;
; 423  :     __m256d N_t_vec = _mm256_set1_pd(N_t);

	mov	rsi, QWORD PTR S_kl$[rsp]
	lea	eax, DWORD PTR [rdx+rdx]
	mov	rbx, QWORD PTR E_CARS$[rsp]
	mov	rdi, QWORD PTR E_probe$[rsp]
	vmovsd	xmm6, QWORD PTR __xmm@80000000000000008000000000000000
	cdqe
	shl	rax, 3
	mov	QWORD PTR tv790[rbp], rax
	sub	rsi, rbx
	npad	11
$LL4@simd_mult2:

; 430  :         G_l = exp(log_G_min + l*dxG);

	vxorps	xmm1, xmm1, xmm1
	vcvtsi2sd xmm1, xmm1, r14d
	vmovaps	xmm0, xmm7
	vfmadd231sd xmm0, xmm8, xmm1
	vzeroupper
	call	exp

; 431  :         G_l_vec = _mm256_set1_pd(-G_l);

	vxorpd	xmm1, xmm0, xmm6
	vbroadcastsd ymm1, xmm1
	vmovupd	YMMWORD PTR G_l_vec$1$[rbp], ymm1

; 432  :         base_addr = &S_kl[2*N_t*l]; 
; 433  :         
; 434  :         for (k=0; k<N_t; k+=4){

	test	r13, r13
	jle	$LN2@simd_mult2

; 430  :         G_l = exp(log_G_min + l*dxG);

	mov	r12, QWORD PTR t_arr$[rsp]
	mov	r15, rdi
	sub	r12, rdi
	add	rbx, 32					; 00000020H
	lea	rdi, QWORD PTR [r13-1]
	shr	rdi, 2
	inc	rdi
	npad	2
$LL7@simd_mult2:

; 435  : 
; 436  :             //factor = exp(-G_l * (t_arr[k] + tau23)) * N_t; 
; 437  :             t_arr_vec = _mm256_loadu_pd(&t_arr[k]);
; 438  :             temp_pd_0 = _mm256_add_pd(t_arr_vec, tau_vec);

	vmovupd	ymm0, YMMWORD PTR tau_vec$1$[rbp]
	vaddpd	ymm0, ymm0, YMMWORD PTR [r12+r15]

; 439  :             temp_pd_0 = _mm256_mul_pd(temp_pd_0, G_l_vec); // can be single fmadd

	vmulpd	ymm0, ymm0, ymm1

; 440  :             temp_pd_0 = _mm256_exp_pd(temp_pd_0);

	call	__vdecl_exp4
	lea	rbx, QWORD PTR [rbx+64]

; 441  :             factor_vec = _mm256_mul_pd(temp_pd_0, N_t_vec); //TODO: *N_t shouldn't be here
; 442  :             probe_vec = _mm256_loadu_pd(&E_probe[k]);

	vmovupd	ymm3, YMMWORD PTR [r15]
	lea	r15, QWORD PTR [r15+32]
	vmulpd	ymm4, ymm0, YMMWORD PTR N_t_vec$1$[rbp]

; 443  :             
; 444  :             
; 445  :             //First pair:
; 446  :             temp_factor_vec = _mm256_permute4x64_pd(factor_vec, 0x50); //0b01010000

	vpermpd	ymm0, ymm4, 80				; 00000050H

; 447  :             temp_probe_vec = _mm256_permute4x64_pd(probe_vec, 0x50); //0b01010000
; 448  :             
; 449  :             //chi_r = S_kl[2*N_t*l + 2*k] * factor;
; 450  :             //chi_i = S_kl[2*N_t*l + 2*k+1] * factor;
; 451  :             chi_vec = _mm256_loadu_pd(&base_addr[2*k]);
; 452  :             chi_vec = _mm256_mul_pd(chi_vec, temp_factor_vec);

	vmulpd	ymm2, ymm0, YMMWORD PTR [rsi+rbx-96]
	vpermpd	ymm1, ymm3, 80				; 00000050H

; 453  :             
; 454  :             //E_CARS[2*k  ] += chi_r * E_probe[k];
; 455  :             //E_CARS[2*k+1] += chi_i * E_probe[k];
; 456  :             chi_vec = _mm256_mul_pd(chi_vec, temp_probe_vec);
; 457  :             E_CARS_vec = _mm256_loadu_pd(&E_CARS[2*k]);
; 458  :             E_CARS_vec = _mm256_add_pd(E_CARS_vec, chi_vec);

	vfmadd213pd ymm2, ymm1, YMMWORD PTR [rbx-96]

; 459  :             _mm256_storeu_pd(&E_CARS[2*k], E_CARS_vec);

	vmovupd	YMMWORD PTR [rbx-96], ymm2

; 460  :             
; 461  :             
; 462  :             //Second pair:
; 463  :             temp_factor_vec = _mm256_permute4x64_pd(factor_vec, 0xFA);   //0b11111010
; 464  :             temp_probe_vec = _mm256_permute4x64_pd(probe_vec, 0xFA);   //0b11111010

	vpermpd	ymm1, ymm3, 250				; 000000faH
	vpermpd	ymm0, ymm4, 250				; 000000faH

; 465  :             
; 466  :             //chi_r = S_kl[2*N_t*l + 2*k] * factor;
; 467  :             //chi_i = S_kl[2*N_t*l + 2*k+1] * factor;
; 468  :             chi_vec = _mm256_loadu_pd(&base_addr[2*k+4]);
; 469  :             chi_vec = _mm256_mul_pd(chi_vec, temp_factor_vec);

	vmulpd	ymm2, ymm0, YMMWORD PTR [rsi+rbx-64]

; 470  :             
; 471  :             //E_CARS[2*k  ] += chi_r * E_probe[k];
; 472  :             //E_CARS[2*k+1] += chi_i * E_probe[k];
; 473  :             chi_vec = _mm256_mul_pd(chi_vec, temp_probe_vec);
; 474  :             E_CARS_vec = _mm256_loadu_pd(&E_CARS[2*k+4]);
; 475  :             E_CARS_vec = _mm256_add_pd(E_CARS_vec, chi_vec);

	vfmadd213pd ymm2, ymm1, YMMWORD PTR [rbx-64]
	vmovupd	ymm1, YMMWORD PTR G_l_vec$1$[rbp]

; 476  :             _mm256_storeu_pd(&E_CARS[2*k+4], E_CARS_vec);    

	vmovupd	YMMWORD PTR [rbx-64], ymm2
	sub	rdi, 1
	jne	SHORT $LL7@simd_mult2
	mov	rdi, QWORD PTR E_probe$[rsp]
	mov	rbx, QWORD PTR E_CARS$[rsp]
$LN2@simd_mult2:

; 428  :     
; 429  :     for (l=0; l<N_G; l++){

	add	rsi, QWORD PTR tv790[rbp]
	inc	r14d
	cmp	r14d, DWORD PTR N_G$[rsp]
	jl	$LL4@simd_mult2
$LN3@simd_mult2:

; 477  :         };
; 478  :     };
; 479  :     
; 480  : };

	vzeroupper
	lea	r11, QWORD PTR [rsp+240]
	mov	rbx, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rdi, QWORD PTR [r11+72]
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	vmovaps	xmm7, XMMWORD PTR [r11-32]
	vmovaps	xmm8, XMMWORD PTR [r11-48]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?simd_mult2_fp64@@YAXHHNNNPEAN000@Z ENDP		; simd_mult2_fp64
_TEXT	ENDS
END
